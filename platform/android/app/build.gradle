plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

android {
    namespace 'ai.buddy.voice'
    compileSdk 34

    defaultConfig {
        applicationId "ai.buddy.voice"
        minSdk 24  // Android 7.0+ for better voice processing
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Build config fields
        buildConfigField "String", "BUDDY_BASE_URL", "\"http://10.0.2.2:8082\""
        buildConfigField "String", "PV_ACCESS_KEY", "\"${project.findProperty('PV_ACCESS_KEY') ?: ''}\""
        buildConfigField "boolean", "VOICE_DEBUG", "true"
        
        // Native library filters
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            buildConfigField "String", "BUDDY_BASE_URL", "\"http://10.0.2.2:8082\""
            buildConfigField "boolean", "VOICE_DEBUG", "true"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BUDDY_BASE_URL", "\"https://buddy-2-0.onrender.com\""
            buildConfigField "boolean", "VOICE_DEBUG", "false"
        }
    }
    
    flavorDimensions "version"
    productFlavors {
        phone {
            dimension "version"
            applicationIdSuffix ".phone"
            versionNameSuffix "-phone"
        }
        wear {
            dimension "version"
            applicationIdSuffix ".wear"
            versionNameSuffix "-wear"
            // Optimize for Wear OS
            buildConfigField "boolean", "IS_WEAR", "true"
            buildConfigField "int", "MAX_SESSION_DURATION", "15000"  // 15 seconds
        }
        auto {
            dimension "version"
            applicationIdSuffix ".auto"
            versionNameSuffix "-auto"
            buildConfigField "boolean", "IS_AUTO", "true"
        }
        tv {
            dimension "version"
            applicationIdSuffix ".tv"
            versionNameSuffix "-tv"
            buildConfigField "boolean", "IS_TV", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    
    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
    }
}

dependencies {
    
    // Core Android dependencies
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    
    // Voice processing dependencies
    implementation 'ai.picovoice:porcupine-android:3.0.2'
    implementation 'org.vosk:vosk-android:0.3.38'
    
    // JSON processing
    implementation 'org.json:json:20231013'
    
    // HTTP client for BUDDY backend
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    
    // Permissions handling
    implementation 'pub.devrel:easypermissions:3.0.0'
    
    // Preferences
    implementation 'androidx.preference:preference-ktx:1.2.1'
    
    // Work Manager (for background tasks)
    implementation 'androidx.work:work-runtime-ktx:2.9.0'
    
    // Navigation
    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.6'
    implementation 'androidx.navigation:navigation-ui-ktx:2.7.6'
    
    // Platform-specific dependencies
    phoneImplementation 'androidx.car.app:app:1.4.0'  // Android Auto
    
    wearImplementation 'androidx.wear:wear:1.3.0'
    wearImplementation 'com.google.android.support:wearable:2.9.0'
    wearImplementation 'androidx.wear.tiles:tiles:1.2.0'
    wearImplementation 'androidx.wear.watchface:watchface-complications-data-source-ktx:1.1.1'
    
    autoImplementation 'androidx.car.app:app:1.4.0'
    autoImplementation 'androidx.car.app:app-automotive:1.4.0'
    
    tvImplementation 'androidx.leanback:leanback:1.0.0'
    tvImplementation 'androidx.leanback:leanback-preference:1.0.0'
    
    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    
    // Debug dependencies
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
}

// Asset configuration
android.applicationVariants.all { variant ->
    variant.mergeAssets.doLast {
        // Copy voice models and keywords to assets
        copy {
            from '../../../buddy/core/voice/models'
            into "${variant.mergeAssets.outputDir}/models"
        }
        copy {
            from '../../../buddy/core/voice/keywords'
            into "${variant.mergeAssets.outputDir}/keywords"
        }
    }
}

// Task to download Vosk models
task downloadVoskModels {
    doLast {
        def modelsDir = file('src/main/assets/models')
        modelsDir.mkdirs()
        
        // Download compact English model
        def englishModelUrl = 'https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip'
        def englishModelFile = file("${modelsDir}/vosk-model-small-en-us-0.15.zip")
        
        if (!englishModelFile.exists()) {
            println "Downloading English Vosk model..."
            new URL(englishModelUrl).withInputStream { i ->
                englishModelFile.withOutputStream { it << i }
            }
            
            // Extract the model
            copy {
                from zipTree(englishModelFile)
                into "${modelsDir}/en-us"
            }
            
            englishModelFile.delete()
        }
    }
}

// Task to generate Porcupine keywords
task generatePorcupineKeywords {
    doLast {
        def keywordsDir = file('src/main/assets/keywords')
        keywordsDir.mkdirs()
        
        // Note: This would typically use Picovoice Console to generate custom keywords
        // For now, we'll create a placeholder file
        def keywordFile = file("${keywordsDir}/hey_buddy.ppn")
        if (!keywordFile.exists()) {
            println "Creating placeholder for hey_buddy.ppn"
            println "To generate real keyword files:"
            println "1. Go to https://console.picovoice.ai/"
            println "2. Create 'Hey Buddy' keyword"
            println "3. Download .ppn file"
            println "4. Place in src/main/assets/keywords/"
            keywordFile.createNewFile()
        }
    }
}

// Run tasks before build
preBuild.dependsOn downloadVoskModels
preBuild.dependsOn generatePorcupineKeywords
